https://www.geeksforgeeks.org/problems/sieve-of-eratosthenes5242/1

class Solution
{
public:
    vector<int> sieveOfEratosthenes(int N)
    {
        vector<bool> isPrime(N + 1, true);
        vector<int> primes;
        
        isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime
        
        for (int i = 2; i * i <= N; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= N; j += i) {
                    isPrime[j] = false; // Mark multiples of i as non-prime
                }
            }
        }
        
        for (int i = 2; i <= N; i++) {
            if (isPrime[i]) primes.push_back(i);
        }
        
        return primes;
    }
};


another GFG method
class Solution
{
public:
    vector<int> sieveOfEratosthenes(int N)
    {
        // Create a boolean array "prime[0..n]" and initialize
        // all entries it as true. A value in prime[i] will
        // finally be false if i is Not a prime, else true.
        bool prime[N+1];
        memset(prime, true, sizeof(prime));
     
        for (int p=2; p*p<=N; p++)
        {
            // If prime[p] is not changed, then it is a prime
            if (prime[p] == true)
            {
                // Update all multiples of p
                for (int i=p*2; i<=N; i += p)
                    prime[i] = false;
            }
        }
     
        vector<int> ans;
        for (int p=2; p<=N; p++)
           if (prime[p])
              ans.push_back(p);
        
        return ans;
    }
};
