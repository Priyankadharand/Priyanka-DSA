//https://www.google.com/url?q=https://www.geeksforgeeks.org/problems/find-last-digit-of-ab-for-large-numbers1936/1&sa=D&source=editors&ust=1741073363266626&usg=AOvVaw3qderwG1eKGczA9tdUzXR5

class Solution {
public:
    int getLastDigit(string a, string b) {
        if (b == "0") return 1; // Any number raised to 0 is 1

        int lastDigitA = a.back() - '0'; // Get last digit of 'a'

        // Cyclic pattern of last digits for bases 0-9
        int cycle[10][4] = {
            {0, 0, 0, 0}, {1, 1, 1, 1}, {2, 4, 8, 6}, {3, 9, 7, 1},
            {4, 6, 4, 6}, {5, 5, 5, 5}, {6, 6, 6, 6}, {7, 9, 3, 1},
            {8, 4, 2, 6}, {9, 1, 9, 1}
        };

        // Compute exponent modulo 4 using last two digits of 'b'
        int len = b.length();
        int exponent = 0;

        if (len == 1) 
            exponent = (b[0] - '0') % 4; // Single-digit case
        else 
            exponent = ((b[len - 2] - '0') * 10 + (b[len - 1] - '0')) % 4;

        if (exponent == 0) 
            exponent = 4; // In cyclic pattern, exponent 0 means we take the 4th value

        return cycle[lastDigitA][exponent - 1]; // Convert 1-based to 0-based index
    }
